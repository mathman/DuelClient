package duelclient;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;

public class GameWindow extends javax.swing.JFrame implements ActionListener
{
    public GameWindow(Point p)
    {
        _numStart = 0;
        _rowsText = 0;
        modele = new DynamicPlayer();
        initComponents();
        pack();
        this.setTitle("Space Attack");
        Players.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JCheckBox()));
        String[] comboData = {"Terminator", "Massacreur"};
        JComboBox combo = new JComboBox(comboData);
        Players.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(combo));
        DefaultTableCellRenderer dcr = new DefaultTableCellRenderer();
        Players.getColumnModel().getColumn(1).setCellRenderer(dcr);
        this.setLocation(p);
        this.setVisible(true);
        newText.addKeyListener(new ClavierListener());
        _timer = new Timer(1000, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        nameGame = new javax.swing.JLabel();
        players = new javax.swing.JLabel();
        _type = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Players = new javax.swing.JTable(modele);
        jScrollPane2 = new javax.swing.JScrollPane();
        logs = new javax.swing.JTextArea();
        newText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        nameGame.setText("Nom de la partie:");

        players.setText("Nombre de joueurs:");

        _type.setText("Type de partie:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(_type)
                    .addComponent(nameGame))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(players)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameGame)
                    .addComponent(players))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_type)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        Players.setFocusable(false);
        Players.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(Players);

        logs.setEditable(false);
        logs.setColumns(20);
        logs.setRows(5);
        logs.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(logs);

        jButton1.setText("Envoyer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Retour");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(newText, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Client.getInstance().leaveGame();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String text = newText.getText();
        String textReplace = text.replaceAll(" ", "-");
        if (textReplace != null)
        {
            Packet packet = new Packet(7, 4 + textReplace.toCharArray().length*2);
            packet.putString(textReplace);
            Client.getInstance().sendPacket(packet);
            newText.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void setNbPlayers(int nbPlayers)
    {
        players.setText("Nombre de joueurs: " + nbPlayers);
	players.repaint();
    }

    public void setName(String name)
    {
        nameGame.setText("Nom de la partie: " + name);
	nameGame.repaint();
    }
    
    public void setType(String type)
    {
        _type.setText("Type de partie: " + type);
	_type.repaint();
    }
    
    public void addGamer(DuelPlayer player)
    {
        modele.addGamer(player);
    }
    
    public void removeAllPlayers()
    {
        modele.removeAllPlayers();
    }
    
    public void sendLog(String log)
    {
        String Newligne = System.getProperty("line.separator");
        if (_rowsText < 6)
        {
            String text = "";
            int space = 5 - _rowsText;
            while (space > 0)
            {
                text += Newligne;
                space--;
            }
            if (_rowsText == 0)
            {
                logs.setText(text + log);
            }
            else
            {
                String oldText = logs.getText();
                String oldTextArray[] = oldText.split(Newligne);
                oldText = "";
                int loops = _rowsText;
                while (loops > 0)
                {
                    oldText += oldTextArray[6 - loops] + Newligne;
                    loops--;
                }
                logs.setText(text + oldText + log);
            }
        }
        else
        {
            String oldText = logs.getText();
            oldText += Newligne;
            logs.setText(oldText + log);
            logs.setCaretPosition(logs.getDocument().getLength());
        }
        _rowsText++;
    }
    
    public void setReady(long guid)
    {
        modele.modifyValue(guid, 2, 1);
    }
    
    public void setClass(long guid, byte Class)
    {
        modele.modifyValue(guid, 1, Class);
    }
    
    private class ClavierListener implements KeyListener
    {
        @Override
        public void keyPressed(KeyEvent event) {
            if (event.getKeyCode() == KeyEvent.VK_ENTER)
            {
                String text = newText.getText();
                String textReplace = text.replaceAll(" ", "-");
                if (textReplace != null)
                {
                    Packet packet = new Packet(7, 4 + textReplace.toCharArray().length*2);
                    packet.putString(textReplace);
                    Client.getInstance().sendPacket(packet);
                    newText.setText("");
                }
            }
        }

        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e)
    {
        _numStart++;
        switch (_numStart)
        {
            case 1:
                sendLog("Démarrage de la partie dans 5 secondes");
                break;
            case 2:
                sendLog("Démarrage de la partie dans 4 secondes");
                break;
            case 3:
                sendLog("Démarrage de la partie dans 3 secondes");
                break;
            case 4:
                sendLog("Démarrage de la partie dans 2 secondes");
                break;
            case 5:
                sendLog("Démarrage de la partie dans 1 secondes");
                break;
            case 6:
                _timer.stop();
                _numStart = 0;
                break;
        }
    }
    
    public void loadStart()
    {
        _timer.start();
    }
    
    public DuelPlayer getDuelPlayer(long guid)
    {
        return modele.getDuelPlayerByGuid(guid);
    }
    
    public void resetTimer()
    {
        _timer.stop();
        _timer = new Timer(1000, this);
    }
    
    private int _rowsText;
    private int _numStart;
    private javax.swing.Timer _timer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Players;
    private DynamicPlayer modele;
    private javax.swing.JLabel _type;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logs;
    private javax.swing.JLabel nameGame;
    private javax.swing.JTextField newText;
    private javax.swing.JLabel players;
    // End of variables declaration//GEN-END:variables
}
